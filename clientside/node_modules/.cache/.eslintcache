[{"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\index.js":"1","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\App.js":"2","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\MainPage.js":"3","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\FetchApi.js":"4","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\ContactsTable.js":"5","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Header.js":"6","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Button.js":"7","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\DataAccessComponent.js":"8","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Footer.js":"9","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\MainContent.js":"10","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\DataSyncComponent.js":"11","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Label.js":"12","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Modal.js":"13","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Input.js":"14","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\BoardsDropdown.js":"15","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\GroupsDropdown.js":"16"},{"size":255,"mtime":1703772148673,"results":"17","hashOfConfig":"18"},{"size":547,"mtime":1704281694539,"results":"19","hashOfConfig":"18"},{"size":890,"mtime":1702290340758,"results":"20","hashOfConfig":"18"},{"size":15296,"mtime":1704285077914,"results":"21","hashOfConfig":"18"},{"size":1470,"mtime":1703846292862,"results":"22","hashOfConfig":"18"},{"size":1769,"mtime":1701864193177,"results":"23","hashOfConfig":"18"},{"size":615,"mtime":1704182452984,"results":"24","hashOfConfig":"18"},{"size":1653,"mtime":1704178814683,"results":"25","hashOfConfig":"18"},{"size":1463,"mtime":1701776894876,"results":"26","hashOfConfig":"18"},{"size":932,"mtime":1703846156243,"results":"27","hashOfConfig":"18"},{"size":1544,"mtime":1702987274652,"results":"28","hashOfConfig":"18"},{"size":207,"mtime":1700735973886,"results":"29","hashOfConfig":"18"},{"size":1051,"mtime":1701851200271,"results":"30","hashOfConfig":"18"},{"size":277,"mtime":1701268887818,"results":"31","hashOfConfig":"18"},{"size":2177,"mtime":1701701560021,"results":"32","hashOfConfig":"18"},{"size":2211,"mtime":1702294005748,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11cmknx",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\index.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\App.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\MainPage.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\FetchApi.js",["85","86","87"],[],"import React, { useState, useEffect } from \"react\";\r\nimport DataAccessComponent from \"./DataAccessComponent\";\r\nimport DataSyncComponent from \"./DataSyncComponent\";\r\nimport './FetchApi.css';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Button from \"./Button\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport mondaySdk from 'monday-sdk-js';\r\nconst storedResponseData = JSON.parse(localStorage.getItem(\"responseData\")) || [];\r\nconst storedApiUrl = localStorage.getItem(\"apiUrl\") || '';\r\nconst storedActiveCampaignApiKey = localStorage.getItem(\"activeCampaignApiKey\") || '';\r\n\r\nconst FetchApi = () => {\r\n\r\n  const [apiUrl, setApiUrl] = useState(storedApiUrl);\r\n  const [activeCampaignApiKey, setActiveCampaignApiKey] = useState(storedActiveCampaignApiKey);\r\n  const [responseData, setResponseData] = useState(storedResponseData);\r\n  const [fetchData, setFetchData] = useState(false);\r\n  const [boardId, setBoardId] = useState('');\r\n  const [groupId, setGroupId] = useState('');\r\n  const [boards, setBoards] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [accessIsGiven, setAccessIsGiven] = useState(false);\r\n  const [isauthorized, setIsAuthorized] = useState(false);\r\n  const [token, setToken] = useState('');\r\n  const monday = mondaySdk();\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"responseData\", JSON.stringify(responseData));\r\n  }, [responseData]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"apiUrl\", apiUrl);\r\n  }, [apiUrl]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"activeCampaignApiKey\", activeCampaignApiKey);\r\n  }, [activeCampaignApiKey]);\r\n\r\n\r\n  const HandleLogin = () => {\r\n\r\n    window.location.href = 'https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/auth';\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const authorizationCode = urlParams.get('code');\r\n\r\n    if (authorizationCode) {\r\n      axios.get(`https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/monday-callback?code=${authorizationCode}`)\r\n        .then((response) => {\r\n          const accessToken = response.data.access_token;\r\n          monday.setToken(accessToken);\r\n\r\n          if (accessToken) {\r\n            setToken(accessToken);\r\n            setIsAuthorized(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error exchanging code for tokens:', error);\r\n        });\r\n    }\r\n  }, [monday]);\r\n\r\n  // Fetching All boards of User's Mondya.com Account\r\n\r\n  const fetchBoards = async () => {\r\n    try {\r\n      const boardsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': '{ boards { id name } }',\r\n        }),\r\n      });\r\n\r\n      const boardsData = await boardsResponse.json();\r\n      console.log(\"Boards Data: \", boardsData);\r\n      setBoards(boardsData.data.boards);\r\n    } catch (error) {\r\n      console.error('Error fetching boards:', error);\r\n    }\r\n  };\r\n\r\n  // Fetching All groups of User's Mondya.com Account under the selected board\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const groupsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `{\r\n            boards(ids: ${boardId}) {\r\n              groups {\r\n                id title\r\n              }\r\n            }\r\n          }`,\r\n        }),\r\n      });\r\n\r\n      const groupsData = await groupsResponse.json();\r\n      console.log(\"groups data: \", groupsData);\r\n      setGroups(groupsData.data.boards[0].groups);\r\n    } catch (error) {\r\n      console.error('Error fetching groups:', error);\r\n    }\r\n  };\r\n\r\n  //Fetching Data from User's Active Campaign Account\r\n\r\n  const fetchActiveCampaignApi = async () => {\r\n    try {\r\n      const response = await fetch(\"https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/api/data\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Api-Token\": `${activeCampaignApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          apiUrl: `${apiUrl}/api/3/contacts`,\r\n          apiKey: activeCampaignApiKey,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Network response was not ok. Status: ${response.status}, ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseData(data.contacts);\r\n      localStorage.setItem(\"contacts\", JSON.stringify(data.contacts));\r\n      console.log(\"AC Contacts: \", data.contacts);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  // Creating Columns against selected group of Monday.com board\r\n  const createColumns = async (columnTitles) => {\r\n    const createdColumns = [];\r\n  \r\n    try {\r\n      // Fetch existing columns for the board\r\n      const existingColumnsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `query { boards (ids: [${boardId}]) { columns { id title }}}`,\r\n        }),\r\n      });\r\n  \r\n      const existingColumnsData = await existingColumnsResponse.json();\r\n      const existingColumns = existingColumnsData.data.boards[0].columns;\r\n  \r\n      for (const title of columnTitles) {\r\n        // Check if the column already exists\r\n        const existingColumn = existingColumns.find((col) => col.title === title);\r\n  \r\n        if (existingColumn) {\r\n          console.log(`Column \"${title}\" already exists with ID ${existingColumn.id}`);\r\n          createdColumns.push({\r\n            title: existingColumn.title,\r\n            id: existingColumn.id\r\n          });\r\n        } else {\r\n          // If the column doesn't exist, create it\r\n          const columnCreationQuery = `\r\n            mutation {\r\n              create_column(board_id: ${boardId}, title: \"${title}\", column_type: text) {\r\n                id\r\n                title\r\n              }\r\n            }\r\n          `;\r\n  \r\n          const columnCreationResponse = await fetch(\"https://api.monday.com/v2\", {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `${token}`,\r\n              'API-Version': '2023-07'\r\n            },\r\n            body: JSON.stringify({\r\n              'query': columnCreationQuery,\r\n            }),\r\n          });\r\n  \r\n          const columnData = await columnCreationResponse.json();\r\n          createdColumns.push({\r\n            title: columnData.data.create_column.title,\r\n            id: columnData.data.create_column.id\r\n          });\r\n        }\r\n      }\r\n  \r\n      return createdColumns;\r\n    } catch (error) {\r\n      console.error('Error fetching or creating columns:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Limitizing not to duplicate the contact in the group\r\n  \r\n  const checkExistingContact = async (id, columnId) => {\r\n    const existingContactQuery = `\r\n      query {\r\n        items_by_column_values(\r\n          board_id: ${boardId},\r\n          column_id: \"${columnId}\",\r\n          column_value: \"${id}\"\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n  \r\n    try {\r\n      const existingContactResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: existingContactQuery\r\n        }),\r\n      });\r\n  \r\n      const existingContactData = await existingContactResponse.json();\r\n      console.log(`Checking id: ${id} for columnId: ${columnId}`);\r\n      console.log(\"Existing Contact Data: \", existingContactData);\r\n  \r\n      return existingContactData.data.items_by_column_values[0]; // Return an array of matching items\r\n    } catch (error) {\r\n      console.error('Error checking existing contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Creating Contact if it is new from Active Campaign\r\n  // Updating the existing one if any change is found from Active Campaign\r\n\r\n  const createOrUpdateContact = async (contact, boardId, columnIds, groupId, existingItemId) => {\r\n    const columnValues = {\r\n      [columnIds[0]]: contact.id,\r\n      [columnIds[1]]: contact.firstName,\r\n      [columnIds[2]]: contact.lastName,\r\n      [columnIds[3]]: contact.email,\r\n      [columnIds[4]]: contact.phone,\r\n    };\r\n  \r\n    const columnValuesString = JSON.stringify(columnValues)\r\n      .replace(/\"/g, '\\\\\"')  // Escape double quotes\r\n      .replace(/\\\\\\\\\"/g, '\\\\\\\\\\\\\\\\\"');  // Escape backslashes before double quotes\r\n  \r\n    let mutationQuery;\r\n    \r\n    if (existingItemId) {\r\n      // If existingItemId is provided, update the existing contact\r\n      mutationQuery = `\r\n        mutation updateContact {\r\n          change_multiple_column_values(\r\n            board_id: ${boardId},\r\n            item_id: ${existingItemId},\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    } else {\r\n      // If no existingItemId is provided, create a new contact\r\n      mutationQuery = `\r\n        mutation createContact {\r\n          create_item(\r\n            board_id: ${boardId},\r\n            group_id: \"${groupId}\",\r\n            item_name: \"contact\",\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: mutationQuery\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Operation failed. Status: ${response.status}, ${response.statusText}`);\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      console.log(\"Contact Data: \", responseData);\r\n    } catch (error) {\r\n      console.error('Error modifying contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n //Getting Column Id by title for creating and updating the contact and it's fields respectively\r\n  \r\n  const getColumnIdByTitle = (columns, title) => {\r\n    const column = columns.find((col) => col.title === title);\r\n    return column ? column.id : null;\r\n  };\r\n\r\n  // Syncing Data from Active Campaign into Monday.com under selected group of selected board\r\n  \r\n  const syncData = async () => {\r\n    try {\r\n      console.log(\"Syncing data...\");\r\n      const columnTitles = [\"Contact_Id\", \"First Name\", \"Last Name\", \"Email\", \"Phone\"];\r\n      const createdColumns = await createColumns(columnTitles);\r\n      const columnIds = columnTitles.map((title) => getColumnIdByTitle(createdColumns, title));\r\n      console.log(\"Columns ids:\", columnIds);\r\n      console.log(\"Response Data: \", responseData);\r\n  \r\n      for (const contact of responseData) {\r\n        const existingContact = await checkExistingContact(contact.id, columnIds[0]);\r\n  \r\n        if (existingContact) {\r\n          // Handle the case where there are multiple matching items\r\n          console.log(`Updating existing contacts for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId, existingContact.id);\r\n        } else {\r\n          console.log(`Creating new contact for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId);\r\n        }\r\n      }\r\n  \r\n      console.log(\"Data synchronization completed successfully!\");\r\n    } catch (error) {\r\n      console.error('Error in syncData:', error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const fetchBoardsAndGroups = async () => {\r\n      await fetchBoards();\r\n      if (boardId) {\r\n        fetchGroups();\r\n      }\r\n    };\r\n\r\n    fetchBoardsAndGroups();\r\n  }, [token, boardId]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (fetchData) {\r\n      fetchActiveCampaignApi();\r\n      // setFetchData(false);\r\n    }\r\n  }, [fetchData]);\r\n\r\n  const handleGoBack = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const onDataAccess = (apiUrl, activeCampaignApiKey) => {\r\n    setApiUrl(apiUrl);\r\n    setActiveCampaignApiKey(activeCampaignApiKey);\r\n  };\r\n\r\n  const handleSyncButtonClick = () => {\r\n    if (isauthorized) {\r\n        setFetchData(true);\r\n        if(responseData.length>0){\r\n          syncData();\r\n          alert(\"Contacts are synced successfully!\");\r\n          navigate(\"/\", { state: { responseData } });        \r\n        }\r\n    } else {\r\n      console.error(\"API URL, Active Campaign API Key, and Monday.com API Key are required.\");\r\n      setAccessIsGiven(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"block\">\r\n        <Header />\r\n        <div className=\"fetchApiBlock\">\r\n          {\r\n            !isauthorized && !fetchData? \r\n            <div className=\"centerlize\">\r\n              <DataAccessComponent onDataAccess={onDataAccess} onFetchData={() => setFetchData(true)} />\r\n              <div className=\"backButton\">\r\n                <Button onClick={()=>handleGoBack()}>\r\n                  Back\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            : !isauthorized && fetchData ?\r\n                  <div className=\"centerlize\">\r\n                      <div className=\"card\">\r\n                        <h2 style={{ textAlign: \"start\" }}>Authorize to Monday.com</h2>\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                          <Button onClick={HandleLogin}>\r\n                            Authorize\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"backButton\">\r\n                        <Button onClick={()=>handleGoBack()}>\r\n                          Back\r\n                        </Button>\r\n                      </div>\r\n                  </div>\r\n            :\r\n            <div className=\"centerlize\">\r\n                <DataSyncComponent\r\n                boards={boards}\r\n                groups={groups}\r\n                boardId={boardId}\r\n                groupId={groupId}\r\n                onBoardChange={setBoardId}\r\n                onGroupChange={setGroupId}\r\n                onSyncData={handleSyncButtonClick}\r\n                accessIsGiven ={isauthorized}\r\n                />\r\n                <div className=\"backButton\">\r\n                    <Button onClick={()=>handleGoBack()}>\r\n                          Back\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n          }\r\n\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );  \r\n};\r\n\r\nexport default FetchApi;","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\ContactsTable.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Header.js",["88","89","90","91","92","93","94"],[],"import activeCampaignIcon from '../icons/activecampaign-icon.png';\r\nimport mondayIcon from '../icons/monday-icon.png';\r\nimport './Header.css';\r\nimport Button from './Button';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst mondayCom ='https://monday.com/';\r\nconst activeCampaign = \"https://www.activecampaign.com/\";\r\n\r\nconst Header = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    return(\r\n        <>\r\n           <div className='headerBlock'>\r\n            <div className='header'>\r\n                    <div className='img-div'>\r\n                        <a href={activeCampaign} target='_blank'><img className='ac-image' src={activeCampaignIcon} alt='activecampaign-icon'/></a>\r\n                        <a href={mondayCom}  target='_blank'><img className='mcom-image' src={mondayIcon} alt='monday-icon'/></a>\r\n                    </div>\r\n                    <div className='btn-div'>\r\n                        <a onClick={()=>{navigate('/')}}>Home</a>\r\n                        <a onClick={()=>{navigate('/fetchApi')}}>Get Access</a>\r\n                    </div>\r\n                    <div class=\"dropdown\">\r\n                       <div className=\"burger-sign\">\r\n                            <span style={{color:\"white\"}}>|</span>\r\n                            <span style={{color:\"white\"}}>|</span>\r\n                            <span style={{color:\"white\"}}>|</span>\r\n                       </div>\r\n                        <div class=\"dropdown-content\">\r\n                            <a onClick={()=>{navigate('/')}}>Home</a>\r\n                            <a onClick={()=>{navigate('/fetchApi')}}>Get Access</a>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n           </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Button.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\DataAccessComponent.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Footer.js",["95","96"],[],"import React from 'react';\r\nimport './Footer.css'; // You can create a separate CSS file for styling\r\nimport { FaFacebook, FaWhatsapp, FaTwitter, FaInstagram, FaLinkedin } from 'react-icons/fa';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <div className=\"footer-content\">\r\n          <div className=\"footer-section\">\r\n            <a href='https://www.techloyce.com/' target='_blank' rel=\"noopener noreferrer\">About Us</a>\r\n            <div>\r\n                <h3>Contact Us:</h3>\r\n                <p>Email: <a href=\"mailto:info@techloyce.com\">info@techloyce.com</a></p>\r\n                <p>Phone: <a href=\"tel:+1234567890\">+123 456 7890</a></p>\r\n            </div>\r\n          </div>\r\n          <p>&copy; 2023 Techloyce. All rights reserved.</p>\r\n          <div className=\"footer-section\">\r\n            <h3>Follow Us</h3>\r\n            <div className=\"social-icons\">\r\n              <a href=\"https://www.facebook.com/Techloyce\" target=\"_blank\" rel=\"noopener noreferrer\"><FaFacebook /></a>\r\n              <a href=\"https://twitter.com/i/flow/login?redirect_after_login=%2Ftechloyce\" target=\"_blank\" rel=\"noopener noreferrer\"><FaTwitter /></a>\r\n              <a href=\"https://www.linkedin.com/company/techloyce\" target=\"_blank\" rel=\"noopener noreferrer\"><FaLinkedin /></a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\MainContent.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\DataSyncComponent.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Label.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Modal.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\Input.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\BoardsDropdown.js",[],[],"C:\\Users\\I T S\\Desktop\\sync-data-from-active_campaigns-to-monday\\src\\components\\GroupsDropdown.js",[],[],{"ruleId":"97","severity":1,"message":"98","line":25,"column":10,"nodeType":"99","messageId":"100","endLine":25,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":385,"column":6,"nodeType":"103","endLine":385,"endColumn":22,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":393,"column":6,"nodeType":"103","endLine":393,"endColumn":17,"suggestions":"106"},{"ruleId":"97","severity":1,"message":"107","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":19,"column":25,"nodeType":"110","messageId":"111","endLine":19,"endColumn":66,"fix":"112"},{"ruleId":"108","severity":1,"message":"109","line":20,"column":25,"nodeType":"110","messageId":"111","endLine":20,"endColumn":62,"fix":"113"},{"ruleId":"114","severity":1,"message":"115","line":23,"column":25,"nodeType":"110","endLine":23,"endColumn":58},{"ruleId":"114","severity":1,"message":"115","line":24,"column":25,"nodeType":"110","endLine":24,"endColumn":66},{"ruleId":"114","severity":1,"message":"115","line":33,"column":29,"nodeType":"110","endLine":33,"endColumn":62},{"ruleId":"114","severity":1,"message":"115","line":34,"column":29,"nodeType":"110","endLine":34,"endColumn":70},{"ruleId":"97","severity":1,"message":"116","line":3,"column":22,"nodeType":"99","messageId":"100","endLine":3,"endColumn":32},{"ruleId":"97","severity":1,"message":"117","line":3,"column":45,"nodeType":"99","messageId":"100","endLine":3,"endColumn":56},"no-unused-vars","'accessIsGiven' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchBoards' and 'fetchGroups'. Either include them or remove the dependency array.","ArrayExpression",["118"],"React Hook useEffect has a missing dependency: 'fetchActiveCampaignApi'. Either include it or remove the dependency array.",["119"],"'Button' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"120","text":"121"},{"range":"122","text":"121"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'FaWhatsapp' is defined but never used.","'FaInstagram' is defined but never used.",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},[610,610]," rel=\"noreferrer\"",[755,755],"Update the dependencies array to be: [token, boardId, fetchBoards, fetchGroups]",{"range":"127","text":"128"},"Update the dependencies array to be: [fetchActiveCampaignApi, fetchData]",{"range":"129","text":"130"},[12500,12516],"[token, boardId, fetchBoards, fetchGroups]",[12643,12654],"[fetchActiveCampaignApi, fetchData]"]