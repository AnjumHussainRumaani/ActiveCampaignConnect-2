{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\I T S\\\\Desktop\\\\sync-data-from-active_campaigns-to-monday\\\\src\\\\components\\\\FetchApi.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport DataAccessComponent from \"./DataAccessComponent\";\nimport DataSyncComponent from \"./DataSyncComponent\";\nimport './FetchApi.css';\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Button from \"./Button\";\nimport Footer from \"./Footer\";\nimport axios from \"axios\";\nimport mondaySdk from 'monday-sdk-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FetchApi = () => {\n  _s();\n  const [apiUrl, setApiUrl] = useState(storedApiUrl);\n  const [activeCampaignApiKey, setActiveCampaignApiKey] = useState(storedActiveCampaignApiKey);\n  const [fetchData, setFetchData] = useState(false);\n  const [responseData, setResponseData] = useState(storedResponseData);\n  const [boardId, setBoardId] = useState('');\n  const [groupId, setGroupId] = useState('');\n  const [boards, setBoards] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [accessIsGiven, setAccessIsGiven] = useState(false);\n  const [isauthorized, setIsAuthorized] = useState(false);\n  const [token, setToken] = useState('');\n  const monday = mondaySdk();\n  const navigate = useNavigate();\n\n  // Fetching All boards of User's Mondya.com Account\n\n  const HandleLogin = () => {\n    // Redirect users to Monday.com's authorization URL\n    // window.location.href = `https://i9j279set4.execute-api.us-east-1.amazonaws.com/prod//auth`;\n    window.location.href = 'http://localhost:4000/auth';\n  };\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const authorizationCode = urlParams.get('code');\n    if (authorizationCode) {\n      axios.get(`http://localhost:4000/monday-callback?code=${authorizationCode}`).then(response => {\n        const accessToken = response.data.access_token;\n        monday.setToken(accessToken);\n        if (accessToken) {\n          setToken(accessToken);\n          setIsAuthorized(true);\n        }\n      }).catch(error => {\n        console.error('Error exchanging code for tokens:', error);\n      });\n    }\n  }, [monday]);\n  const fetchBoards = async () => {\n    try {\n      const boardsResponse = await fetch(\"https://api.monday.com/v2\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${token}`,\n          'API-Version': '2023-07'\n        },\n        body: JSON.stringify({\n          'query': '{ boards { id name } }'\n        })\n      });\n      const boardsData = await boardsResponse.json();\n      console.log(\"Boards Data: \", boardsData);\n      setBoards(boardsData.data.boards);\n    } catch (error) {\n      console.error('Error fetching boards:', error);\n    }\n  };\n\n  // Fetching All groups of User's Mondya.com Account under the selected board\n\n  const fetchGroups = async () => {\n    try {\n      const groupsResponse = await fetch(\"https://api.monday.com/v2\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${token}`,\n          'API-Version': '2023-07'\n        },\n        body: JSON.stringify({\n          'query': `{\n            boards(ids: ${boardId}) {\n              groups {\n                id title\n              }\n            }\n          }`\n        })\n      });\n      const groupsData = await groupsResponse.json();\n      console.log(\"groups data: \", groupsData);\n      setGroups(groupsData.data.boards[0].groups);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n    }\n  };\n\n  //Fetching Data from User's Active Campaign Account\n\n  const fetchActiveCampaignApi = async () => {\n    try {\n      const response = await fetch(\"http://localhost:4000/api/data\", {\n        method: \"POST\",\n        headers: {\n          \"Api-Token\": `${activeCampaignApiKey}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          apiUrl: `${apiUrl}/api/3/contacts`,\n          apiKey: activeCampaignApiKey\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Network response was not ok. Status: ${response.status}, ${response.statusText}`);\n      }\n      const data = await response.json();\n      setResponseData(data.contacts);\n      localStorage.setItem(\"contacts\", JSON.stringify(data.contacts));\n      console.log(\"AC Contacts: \", data.contacts);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // Creating Columns in the selected group for syncing data of contacts from Active Campaign\n\n  const createColumns = async columnTitles => {\n    const createdColumns = [];\n    try {\n      // Fetch existing columns for the board\n      const existingColumnsResponse = await fetch(\"https://api.monday.com/v2\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `${token}`,\n          'API-Version': '2023-07'\n        },\n        body: JSON.stringify({\n          'query': `query { boards (ids: [${boardId}]) { columns { id title }}}`\n        })\n      });\n      const existingColumnsData = await existingColumnsResponse.json();\n      const existingColumns = existingColumnsData.data.boards[0].columns;\n      for (const title of columnTitles) {\n        // Check if the column already exists\n        const existingColumn = existingColumns.find(col => col.title === title);\n        if (existingColumn) {\n          console.log(`Column \"${title}\" already exists with ID ${existingColumn.id}`);\n          createdColumns.push({\n            title: existingColumn.title,\n            id: existingColumn.id\n          });\n        } else {\n          // If the column doesn't exist, create it\n          const columnCreationQuery = `\n            mutation {\n              create_column(board_id: ${boardId}, title: \"${title}\", column_type: text) {\n                id\n                title\n              }\n            }\n          `;\n          const columnCreationResponse = await fetch(\"https://api.monday.com/v2\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `${token}`,\n              'API-Version': '2023-07'\n            },\n            body: JSON.stringify({\n              'query': columnCreationQuery\n            })\n          });\n          const columnData = await columnCreationResponse.json();\n          createdColumns.push({\n            title: columnData.data.create_column.title,\n            id: columnData.data.create_column.id\n          });\n        }\n      }\n      return createdColumns;\n    } catch (error) {\n      console.error('Error fetching or creating columns:', error);\n      throw error;\n    }\n  };\n\n  // Limitizing not to duplicate the contact in the group\n\n  const checkExistingContact = async (id, columnId) => {\n    const existingContactQuery = `\n      query {\n        items_by_column_values(\n          board_id: ${boardId},\n          column_id: \"${columnId}\",\n          column_value: \"${id}\"\n        ) {\n          id\n        }\n      }\n    `;\n    try {\n      const existingContactResponse = await fetch(\"https://api.monday.com/v2\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `${token}`,\n          'API-Version': '2023-04'\n        },\n        body: JSON.stringify({\n          query: existingContactQuery\n        })\n      });\n      const existingContactData = await existingContactResponse.json();\n      console.log(`Checking id: ${id} for columnId: ${columnId}`);\n      console.log(\"Existing Contact Data: \", existingContactData);\n      return existingContactData.data.items_by_column_values[0]; // Return an array of matching items\n    } catch (error) {\n      console.error('Error checking existing contact:', error);\n      throw error;\n    }\n  };\n\n  // Creating Contact if it is new from Active Campaign\n  // Updating the existing one if any change is found from Active Campaign\n\n  const createOrUpdateContact = async (contact, boardId, columnIds, groupId, existingItemId) => {\n    const columnValues = {\n      [columnIds[0]]: contact.id,\n      [columnIds[1]]: contact.firstName,\n      [columnIds[2]]: contact.lastName,\n      [columnIds[3]]: contact.email,\n      [columnIds[4]]: contact.phone\n    };\n    const columnValuesString = JSON.stringify(columnValues).replace(/\"/g, '\\\\\"') // Escape double quotes\n    .replace(/\\\\\\\\\"/g, '\\\\\\\\\\\\\\\\\"'); // Escape backslashes before double quotes\n\n    let mutationQuery;\n    if (existingItemId) {\n      // If existingItemId is provided, update the existing contact\n      mutationQuery = `\n        mutation updateContact {\n          change_multiple_column_values(\n            board_id: ${boardId},\n            item_id: ${existingItemId},\n            column_values: \"${columnValuesString}\"\n          ) {\n            id\n          }\n        }\n      `;\n    } else {\n      // If no existingItemId is provided, create a new contact\n      mutationQuery = `\n        mutation createContact {\n          create_item(\n            board_id: ${boardId},\n            group_id: \"${groupId}\",\n            item_name: \"contact\",\n            column_values: \"${columnValuesString}\"\n          ) {\n            id\n          }\n        }\n      `;\n    }\n    try {\n      const response = await fetch(\"https://api.monday.com/v2\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `${token}`,\n          'API-Version': '2023-04'\n        },\n        body: JSON.stringify({\n          query: mutationQuery\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Operation failed. Status: ${response.status}, ${response.statusText}`);\n      }\n      const responseData = await response.json();\n      console.log(\"Contact Data: \", responseData);\n    } catch (error) {\n      console.error('Error modifying contact:', error);\n      throw error;\n    }\n  };\n\n  //Getting Column Id by title for creating and updating the contact and it's fields respectively\n\n  const getColumnIdByTitle = (columns, title) => {\n    const column = columns.find(col => col.title === title);\n    return column ? column.id : null;\n  };\n\n  // Syncing Data from Active Campaign into Monday.com under selected group of selected board\n\n  const syncData = async () => {\n    try {\n      console.log(\"Syncing data...\");\n      const columnTitles = [\"Contact_Id\", \"First Name\", \"Last Name\", \"Email\", \"Phone\"];\n      const createdColumns = await createColumns(columnTitles);\n      const columnIds = columnTitles.map(title => getColumnIdByTitle(createdColumns, title));\n      console.log(\"Columns ids:\", columnIds);\n      console.log(\"Response Data: \", responseData);\n      for (const contact of responseData) {\n        const existingContact = await checkExistingContact(contact.id, columnIds[0]);\n        if (existingContact) {\n          // Handle the case where there are multiple matching items\n          console.log(`Updating existing contacts for id: ${contact.id}`);\n          await createOrUpdateContact(contact, boardId, columnIds, groupId, existingContact.id);\n        } else {\n          console.log(`Creating new contact for id: ${contact.id}`);\n          await createOrUpdateContact(contact, boardId, columnIds, groupId);\n        }\n      }\n      console.log(\"Data synchronization completed successfully!\");\n    } catch (error) {\n      console.error('Error in syncData:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchBoardsAndGroups = async () => {\n      await fetchBoards();\n      if (boardId) {\n        fetchGroups();\n      }\n    };\n    fetchBoardsAndGroups();\n  }, [token, boardId]);\n  useEffect(() => {\n    localStorage.setItem(\"boardId\", boardId);\n    localStorage.setItem(\"groupId\", groupId);\n  }, [boardId, groupId]);\n  useEffect(() => {\n    if (fetchData) {\n      fetchActiveCampaignApi();\n      setFetchData(false);\n    }\n  }, [fetchData]);\n  const handleGoBack = () => {\n    navigate('/');\n  };\n  const onDataAccess = (apiUrl, activeCampaignApiKey) => {\n    setApiUrl(apiUrl);\n    setActiveCampaignApiKey(activeCampaignApiKey);\n  };\n  const handleSyncButtonClick = () => {\n    if (isauthorized) {\n      setFetchData(true);\n      if (responseData.length > 0) {\n        syncData();\n        alert(\"Contacts are synced successfully!\");\n        navigate(\"/contacts\", {\n          state: {\n            responseData\n          }\n        });\n      }\n    } else {\n      console.error(\"API URL, Active Campaign API Key, and Monday.com API Key are required.\");\n      setAccessIsGiven(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetchApiBlock\",\n        children: [!isauthorized ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(DataAccessComponent, {\n            onDataAccess: onDataAccess,\n            onFetchData: () => setFetchData(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: HandleLogin,\n            children: \"Authorize to Monday.com\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(DataSyncComponent, {\n          boards: boards,\n          groups: groups,\n          boardId: boardId,\n          groupId: groupId,\n          onBoardChange: setBoardId,\n          onGroupChange: setGroupId,\n          onSyncData: handleSyncButtonClick,\n          accessIsGiven: isauthorized\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"backButton\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleGoBack(),\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(FetchApi, \"cv3Q9ufzkKnrSVKIvsNfDpOUUlI=\", false, function () {\n  return [useNavigate];\n});\n_c = FetchApi;\nexport default FetchApi;\nvar _c;\n$RefreshReg$(_c, \"FetchApi\");","map":{"version":3,"names":["React","useState","useEffect","DataAccessComponent","DataSyncComponent","useNavigate","Header","Button","Footer","axios","mondaySdk","jsxDEV","_jsxDEV","Fragment","_Fragment","FetchApi","_s","apiUrl","setApiUrl","storedApiUrl","activeCampaignApiKey","setActiveCampaignApiKey","storedActiveCampaignApiKey","fetchData","setFetchData","responseData","setResponseData","storedResponseData","boardId","setBoardId","groupId","setGroupId","boards","setBoards","groups","setGroups","accessIsGiven","setAccessIsGiven","isauthorized","setIsAuthorized","token","setToken","monday","navigate","HandleLogin","window","location","href","urlParams","URLSearchParams","search","authorizationCode","get","then","response","accessToken","data","access_token","catch","error","console","fetchBoards","boardsResponse","fetch","method","headers","body","JSON","stringify","boardsData","json","log","fetchGroups","groupsResponse","groupsData","fetchActiveCampaignApi","apiKey","ok","Error","status","statusText","contacts","localStorage","setItem","e","createColumns","columnTitles","createdColumns","existingColumnsResponse","existingColumnsData","existingColumns","columns","title","existingColumn","find","col","id","push","columnCreationQuery","columnCreationResponse","columnData","create_column","checkExistingContact","columnId","existingContactQuery","existingContactResponse","query","existingContactData","items_by_column_values","createOrUpdateContact","contact","columnIds","existingItemId","columnValues","firstName","lastName","email","phone","columnValuesString","replace","mutationQuery","getColumnIdByTitle","column","syncData","map","existingContact","fetchBoardsAndGroups","handleGoBack","onDataAccess","handleSyncButtonClick","length","alert","state","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onFetchData","onClick","onBoardChange","onGroupChange","onSyncData","_c","$RefreshReg$"],"sources":["C:/Users/I T S/Desktop/sync-data-from-active_campaigns-to-monday/src/components/FetchApi.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DataAccessComponent from \"./DataAccessComponent\";\r\nimport DataSyncComponent from \"./DataSyncComponent\";\r\nimport './FetchApi.css';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Button from \"./Button\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport mondaySdk from 'monday-sdk-js';\r\n\r\nconst FetchApi = () => {\r\n\r\n  const [apiUrl, setApiUrl] = useState(storedApiUrl);\r\n  const [activeCampaignApiKey, setActiveCampaignApiKey] = useState(storedActiveCampaignApiKey);\r\n  const [fetchData, setFetchData] = useState(false);\r\n  const [responseData, setResponseData] = useState(storedResponseData);\r\n  const [boardId, setBoardId] = useState('');\r\n  const [groupId, setGroupId] = useState('');\r\n  const [boards, setBoards] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [accessIsGiven, setAccessIsGiven] = useState(false);\r\n  const [isauthorized, setIsAuthorized] = useState(false);\r\n  const [token, setToken] = useState('');\r\n  const monday = mondaySdk();\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Fetching All boards of User's Mondya.com Account\r\n\r\n  const HandleLogin = () => {\r\n\r\n    // Redirect users to Monday.com's authorization URL\r\n    // window.location.href = `https://i9j279set4.execute-api.us-east-1.amazonaws.com/prod//auth`;\r\n    window.location.href = 'http://localhost:4000/auth';\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const authorizationCode = urlParams.get('code');\r\n\r\n    if (authorizationCode) {\r\n      axios.get(`http://localhost:4000/monday-callback?code=${authorizationCode}`)\r\n        .then((response) => {\r\n          const accessToken = response.data.access_token;\r\n          monday.setToken(accessToken);\r\n\r\n          if (accessToken) {\r\n            setToken(accessToken);\r\n            setIsAuthorized(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error exchanging code for tokens:', error);\r\n        });\r\n    }\r\n  }, [monday]);\r\n\r\n  const fetchBoards = async () => {\r\n    try {\r\n      const boardsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': '{ boards { id name } }',\r\n        }),\r\n      });\r\n\r\n      const boardsData = await boardsResponse.json();\r\n      console.log(\"Boards Data: \", boardsData);\r\n      setBoards(boardsData.data.boards);\r\n    } catch (error) {\r\n      console.error('Error fetching boards:', error);\r\n    }\r\n  };\r\n\r\n  // Fetching All groups of User's Mondya.com Account under the selected board\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const groupsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `{\r\n            boards(ids: ${boardId}) {\r\n              groups {\r\n                id title\r\n              }\r\n            }\r\n          }`,\r\n        }),\r\n      });\r\n\r\n      const groupsData = await groupsResponse.json();\r\n      console.log(\"groups data: \", groupsData);\r\n      setGroups(groupsData.data.boards[0].groups);\r\n    } catch (error) {\r\n      console.error('Error fetching groups:', error);\r\n    }\r\n  };\r\n\r\n  //Fetching Data from User's Active Campaign Account\r\n\r\n  const fetchActiveCampaignApi = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:4000/api/data\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Api-Token\": `${activeCampaignApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          apiUrl: `${apiUrl}/api/3/contacts`,\r\n          apiKey: activeCampaignApiKey,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Network response was not ok. Status: ${response.status}, ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseData(data.contacts);\r\n      localStorage.setItem(\"contacts\", JSON.stringify(data.contacts));\r\n      console.log(\"AC Contacts: \", data.contacts);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  // Creating Columns in the selected group for syncing data of contacts from Active Campaign\r\n\r\n  const createColumns = async (columnTitles) => {\r\n    const createdColumns = [];\r\n  \r\n    try {\r\n      // Fetch existing columns for the board\r\n      const existingColumnsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `query { boards (ids: [${boardId}]) { columns { id title }}}`,\r\n        }),\r\n      });\r\n  \r\n      const existingColumnsData = await existingColumnsResponse.json();\r\n      const existingColumns = existingColumnsData.data.boards[0].columns;\r\n  \r\n      for (const title of columnTitles) {\r\n        // Check if the column already exists\r\n        const existingColumn = existingColumns.find((col) => col.title === title);\r\n  \r\n        if (existingColumn) {\r\n          console.log(`Column \"${title}\" already exists with ID ${existingColumn.id}`);\r\n          createdColumns.push({\r\n            title: existingColumn.title,\r\n            id: existingColumn.id\r\n          });\r\n        } else {\r\n          // If the column doesn't exist, create it\r\n          const columnCreationQuery = `\r\n            mutation {\r\n              create_column(board_id: ${boardId}, title: \"${title}\", column_type: text) {\r\n                id\r\n                title\r\n              }\r\n            }\r\n          `;\r\n  \r\n          const columnCreationResponse = await fetch(\"https://api.monday.com/v2\", {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `${token}`,\r\n              'API-Version': '2023-07'\r\n            },\r\n            body: JSON.stringify({\r\n              'query': columnCreationQuery,\r\n            }),\r\n          });\r\n  \r\n          const columnData = await columnCreationResponse.json();\r\n          createdColumns.push({\r\n            title: columnData.data.create_column.title,\r\n            id: columnData.data.create_column.id\r\n          });\r\n        }\r\n      }\r\n  \r\n      return createdColumns;\r\n    } catch (error) {\r\n      console.error('Error fetching or creating columns:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Limitizing not to duplicate the contact in the group\r\n  \r\n  const checkExistingContact = async (id, columnId) => {\r\n    const existingContactQuery = `\r\n      query {\r\n        items_by_column_values(\r\n          board_id: ${boardId},\r\n          column_id: \"${columnId}\",\r\n          column_value: \"${id}\"\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n  \r\n    try {\r\n      const existingContactResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: existingContactQuery\r\n        }),\r\n      });\r\n  \r\n      const existingContactData = await existingContactResponse.json();\r\n      console.log(`Checking id: ${id} for columnId: ${columnId}`);\r\n      console.log(\"Existing Contact Data: \", existingContactData);\r\n  \r\n      return existingContactData.data.items_by_column_values[0]; // Return an array of matching items\r\n    } catch (error) {\r\n      console.error('Error checking existing contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Creating Contact if it is new from Active Campaign\r\n  // Updating the existing one if any change is found from Active Campaign\r\n\r\n  const createOrUpdateContact = async (contact, boardId, columnIds, groupId, existingItemId) => {\r\n    const columnValues = {\r\n      [columnIds[0]]: contact.id,\r\n      [columnIds[1]]: contact.firstName,\r\n      [columnIds[2]]: contact.lastName,\r\n      [columnIds[3]]: contact.email,\r\n      [columnIds[4]]: contact.phone,\r\n    };\r\n  \r\n    const columnValuesString = JSON.stringify(columnValues)\r\n      .replace(/\"/g, '\\\\\"')  // Escape double quotes\r\n      .replace(/\\\\\\\\\"/g, '\\\\\\\\\\\\\\\\\"');  // Escape backslashes before double quotes\r\n  \r\n    let mutationQuery;\r\n    \r\n    if (existingItemId) {\r\n      // If existingItemId is provided, update the existing contact\r\n      mutationQuery = `\r\n        mutation updateContact {\r\n          change_multiple_column_values(\r\n            board_id: ${boardId},\r\n            item_id: ${existingItemId},\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    } else {\r\n      // If no existingItemId is provided, create a new contact\r\n      mutationQuery = `\r\n        mutation createContact {\r\n          create_item(\r\n            board_id: ${boardId},\r\n            group_id: \"${groupId}\",\r\n            item_name: \"contact\",\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: mutationQuery\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Operation failed. Status: ${response.status}, ${response.statusText}`);\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      console.log(\"Contact Data: \", responseData);\r\n    } catch (error) {\r\n      console.error('Error modifying contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n //Getting Column Id by title for creating and updating the contact and it's fields respectively\r\n  \r\n  const getColumnIdByTitle = (columns, title) => {\r\n    const column = columns.find((col) => col.title === title);\r\n    return column ? column.id : null;\r\n  };\r\n\r\n  // Syncing Data from Active Campaign into Monday.com under selected group of selected board\r\n  \r\n  const syncData = async () => {\r\n    try {\r\n      console.log(\"Syncing data...\");\r\n      const columnTitles = [\"Contact_Id\", \"First Name\", \"Last Name\", \"Email\", \"Phone\"];\r\n      const createdColumns = await createColumns(columnTitles);\r\n      const columnIds = columnTitles.map((title) => getColumnIdByTitle(createdColumns, title));\r\n      console.log(\"Columns ids:\", columnIds);\r\n      console.log(\"Response Data: \", responseData);\r\n  \r\n      for (const contact of responseData) {\r\n        const existingContact = await checkExistingContact(contact.id, columnIds[0]);\r\n  \r\n        if (existingContact) {\r\n          // Handle the case where there are multiple matching items\r\n          console.log(`Updating existing contacts for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId, existingContact.id);\r\n        } else {\r\n          console.log(`Creating new contact for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId);\r\n        }\r\n      }\r\n  \r\n      console.log(\"Data synchronization completed successfully!\");\r\n    } catch (error) {\r\n      console.error('Error in syncData:', error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const fetchBoardsAndGroups = async () => {\r\n      await fetchBoards();\r\n      if (boardId) {\r\n        fetchGroups();\r\n      }\r\n    };\r\n\r\n    fetchBoardsAndGroups();\r\n  }, [token, boardId]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"boardId\", boardId);\r\n    localStorage.setItem(\"groupId\", groupId);\r\n  }, [boardId, groupId]);\r\n\r\n  useEffect(() => {\r\n    if (fetchData) {\r\n      fetchActiveCampaignApi();\r\n      setFetchData(false);\r\n    }\r\n  }, [fetchData]);\r\n\r\n  const handleGoBack = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const onDataAccess = (apiUrl, activeCampaignApiKey) => {\r\n    setApiUrl(apiUrl);\r\n    setActiveCampaignApiKey(activeCampaignApiKey);\r\n  };\r\n\r\n  const handleSyncButtonClick = () => {\r\n    if (isauthorized) {\r\n        setFetchData(true);\r\n        if(responseData.length>0){\r\n          syncData();\r\n          alert(\"Contacts are synced successfully!\");\r\n          navigate(\"/contacts\", { state: { responseData } });        \r\n        }\r\n    } else {\r\n      console.error(\"API URL, Active Campaign API Key, and Monday.com API Key are required.\");\r\n      setAccessIsGiven(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"block\">\r\n        <Header />\r\n        <div className=\"fetchApiBlock\">\r\n          {\r\n            !isauthorized ? \r\n            <div>\r\n              <DataAccessComponent onDataAccess={onDataAccess} onFetchData={() => setFetchData(true)} />\r\n              <Button onClick={HandleLogin}>Authorize to Monday.com</Button>\r\n            </div>\r\n            :           \r\n            <DataSyncComponent\r\n              boards={boards}\r\n              groups={groups}\r\n              boardId={boardId}\r\n              groupId={groupId}\r\n              onBoardChange={setBoardId}\r\n              onGroupChange={setGroupId}\r\n              onSyncData={handleSyncButtonClick}\r\n              accessIsGiven ={isauthorized}\r\n            />\r\n          }\r\n\r\n          <div className=\"backButton\">\r\n            <Button onClick={()=>handleGoBack()}>\r\n              Back\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );  \r\n};\r\n\r\nexport default FetchApi;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAO,gBAAgB;AACvB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAACkB,YAAY,CAAC;EAClD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGpB,QAAQ,CAACqB,0BAA0B,CAAC;EAC5F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC0B,kBAAkB,CAAC;EACpE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACiC,MAAM,EAAEC,SAAS,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACqC,YAAY,EAAEC,eAAe,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMyC,MAAM,GAAGhC,SAAS,CAAC,CAAC;EAG1B,MAAMiC,QAAQ,GAAGtC,WAAW,CAAC,CAAC;;EAE9B;;EAEA,MAAMuC,WAAW,GAAGA,CAAA,KAAM;IAExB;IACA;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,4BAA4B;EACrD,CAAC;EAED7C,SAAS,CAAC,MAAM;IACd,MAAM8C,SAAS,GAAG,IAAIC,eAAe,CAACJ,MAAM,CAACC,QAAQ,CAACI,MAAM,CAAC;IAC7D,MAAMC,iBAAiB,GAAGH,SAAS,CAACI,GAAG,CAAC,MAAM,CAAC;IAE/C,IAAID,iBAAiB,EAAE;MACrB1C,KAAK,CAAC2C,GAAG,CAAE,8CAA6CD,iBAAkB,EAAC,CAAC,CACzEE,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAI,CAACC,YAAY;QAC9Cf,MAAM,CAACD,QAAQ,CAACc,WAAW,CAAC;QAE5B,IAAIA,WAAW,EAAE;UACfd,QAAQ,CAACc,WAAW,CAAC;UACrBhB,eAAe,CAAC,IAAI,CAAC;QACvB;MACF,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACjB,MAAM,CAAC,CAAC;EAEZ,MAAMmB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;UAC3B,aAAa,EAAE;QACjB,CAAC;QACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,OAAO,EAAE;QACX,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,UAAU,GAAG,MAAMP,cAAc,CAACQ,IAAI,CAAC,CAAC;MAC9CV,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEF,UAAU,CAAC;MACxCpC,SAAS,CAACoC,UAAU,CAACb,IAAI,CAACxB,MAAM,CAAC;IACnC,CAAC,CAAC,OAAO2B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;;EAEA,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMV,KAAK,CAAC,2BAA2B,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;UAC3B,aAAa,EAAE;QACjB,CAAC;QACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,OAAO,EAAG;AACpB,0BAA0BxC,OAAQ;AAClC;AACA;AACA;AACA;AACA;QACQ,CAAC;MACH,CAAC,CAAC;MAEF,MAAM8C,UAAU,GAAG,MAAMD,cAAc,CAACH,IAAI,CAAC,CAAC;MAC9CV,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEG,UAAU,CAAC;MACxCvC,SAAS,CAACuC,UAAU,CAAClB,IAAI,CAACxB,MAAM,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC;IAC7C,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;;EAEA,MAAMgB,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMS,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,WAAW,EAAG,GAAE7C,oBAAqB,EAAC;UACtC,cAAc,EAAE;QAClB,CAAC;QACD8C,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBnD,MAAM,EAAG,GAAEA,MAAO,iBAAgB;UAClC2D,MAAM,EAAExD;QACV,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACkC,QAAQ,CAACuB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CACZ,wCAAuCxB,QAAQ,CAACyB,MAAO,KAAIzB,QAAQ,CAAC0B,UAAW,EAClF,CAAC;MACH;MAEA,MAAMxB,IAAI,GAAG,MAAMF,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAClC5C,eAAe,CAAC8B,IAAI,CAACyB,QAAQ,CAAC;MAC9BC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEhB,IAAI,CAACC,SAAS,CAACZ,IAAI,CAACyB,QAAQ,CAAC,CAAC;MAC/DrB,OAAO,CAACW,GAAG,CAAC,eAAe,EAAEf,IAAI,CAACyB,QAAQ,CAAC;IAC7C,CAAC,CAAC,OAAOG,CAAC,EAAE;MACVxB,OAAO,CAACD,KAAK,CAACyB,CAAC,CAAC;IAClB;EACF,CAAC;;EAED;;EAEA,MAAMC,aAAa,GAAG,MAAOC,YAAY,IAAK;IAC5C,MAAMC,cAAc,GAAG,EAAE;IAEzB,IAAI;MACF;MACA,MAAMC,uBAAuB,GAAG,MAAMzB,KAAK,CAAC,2BAA2B,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;UAC3B,aAAa,EAAE;QACjB,CAAC;QACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB,OAAO,EAAG,yBAAwBxC,OAAQ;QAC5C,CAAC;MACH,CAAC,CAAC;MAEF,MAAM6D,mBAAmB,GAAG,MAAMD,uBAAuB,CAAClB,IAAI,CAAC,CAAC;MAChE,MAAMoB,eAAe,GAAGD,mBAAmB,CAACjC,IAAI,CAACxB,MAAM,CAAC,CAAC,CAAC,CAAC2D,OAAO;MAElE,KAAK,MAAMC,KAAK,IAAIN,YAAY,EAAE;QAChC;QACA,MAAMO,cAAc,GAAGH,eAAe,CAACI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACH,KAAK,KAAKA,KAAK,CAAC;QAEzE,IAAIC,cAAc,EAAE;UAClBjC,OAAO,CAACW,GAAG,CAAE,WAAUqB,KAAM,4BAA2BC,cAAc,CAACG,EAAG,EAAC,CAAC;UAC5ET,cAAc,CAACU,IAAI,CAAC;YAClBL,KAAK,EAAEC,cAAc,CAACD,KAAK;YAC3BI,EAAE,EAAEH,cAAc,CAACG;UACrB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,MAAME,mBAAmB,GAAI;AACvC;AACA,wCAAwCtE,OAAQ,aAAYgE,KAAM;AAClE;AACA;AACA;AACA;AACA,WAAW;UAED,MAAMO,sBAAsB,GAAG,MAAMpC,KAAK,CAAC,2BAA2B,EAAE;YACtEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;cAC3B,aAAa,EAAE;YACjB,CAAC;YACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnB,OAAO,EAAE8B;YACX,CAAC;UACH,CAAC,CAAC;UAEF,MAAME,UAAU,GAAG,MAAMD,sBAAsB,CAAC7B,IAAI,CAAC,CAAC;UACtDiB,cAAc,CAACU,IAAI,CAAC;YAClBL,KAAK,EAAEQ,UAAU,CAAC5C,IAAI,CAAC6C,aAAa,CAACT,KAAK;YAC1CI,EAAE,EAAEI,UAAU,CAAC5C,IAAI,CAAC6C,aAAa,CAACL;UACpC,CAAC,CAAC;QACJ;MACF;MAEA,OAAOT,cAAc;IACvB,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;;EAEA,MAAM2C,oBAAoB,GAAG,MAAAA,CAAON,EAAE,EAAEO,QAAQ,KAAK;IACnD,MAAMC,oBAAoB,GAAI;AAClC;AACA;AACA,sBAAsB5E,OAAQ;AAC9B,wBAAwB2E,QAAS;AACjC,2BAA2BP,EAAG;AAC9B;AACA;AACA;AACA;AACA,KAAK;IAED,IAAI;MACF,MAAMS,uBAAuB,GAAG,MAAM1C,KAAK,CAAC,2BAA2B,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;UAC3B,aAAa,EAAE;QACjB,CAAC;QACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBsC,KAAK,EAAEF;QACT,CAAC;MACH,CAAC,CAAC;MAEF,MAAMG,mBAAmB,GAAG,MAAMF,uBAAuB,CAACnC,IAAI,CAAC,CAAC;MAChEV,OAAO,CAACW,GAAG,CAAE,gBAAeyB,EAAG,kBAAiBO,QAAS,EAAC,CAAC;MAC3D3C,OAAO,CAACW,GAAG,CAAC,yBAAyB,EAAEoC,mBAAmB,CAAC;MAE3D,OAAOA,mBAAmB,CAACnD,IAAI,CAACoD,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOjD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA;;EAEA,MAAMkD,qBAAqB,GAAG,MAAAA,CAAOC,OAAO,EAAElF,OAAO,EAAEmF,SAAS,EAAEjF,OAAO,EAAEkF,cAAc,KAAK;IAC5F,MAAMC,YAAY,GAAG;MACnB,CAACF,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACd,EAAE;MAC1B,CAACe,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACI,SAAS;MACjC,CAACH,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACK,QAAQ;MAChC,CAACJ,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACM,KAAK;MAC7B,CAACL,SAAS,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACO;IAC1B,CAAC;IAED,MAAMC,kBAAkB,GAAGnD,IAAI,CAACC,SAAS,CAAC6C,YAAY,CAAC,CACpDM,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAE;IAAA,CACtBA,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAE;;IAEpC,IAAIC,aAAa;IAEjB,IAAIR,cAAc,EAAE;MAClB;MACAQ,aAAa,GAAI;AACvB;AACA;AACA,wBAAwB5F,OAAQ;AAChC,uBAAuBoF,cAAe;AACtC,8BAA8BM,kBAAmB;AACjD;AACA;AACA;AACA;AACA,OAAO;IACH,CAAC,MAAM;MACL;MACAE,aAAa,GAAI;AACvB;AACA;AACA,wBAAwB5F,OAAQ;AAChC,yBAAyBE,OAAQ;AACjC;AACA,8BAA8BwF,kBAAmB;AACjD;AACA;AACA;AACA;AACA,OAAO;IACH;IAEA,IAAI;MACF,MAAMhE,QAAQ,GAAG,MAAMS,KAAK,CAAC,2BAA2B,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,GAAEzB,KAAM,EAAC;UAC3B,aAAa,EAAE;QACjB,CAAC;QACD0B,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBsC,KAAK,EAAEc;QACT,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAClE,QAAQ,CAACuB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,6BAA4BxB,QAAQ,CAACyB,MAAO,KAAIzB,QAAQ,CAAC0B,UAAW,EAAC,CAAC;MACzF;MAEA,MAAMvD,YAAY,GAAG,MAAM6B,QAAQ,CAACgB,IAAI,CAAC,CAAC;MAC1CV,OAAO,CAACW,GAAG,CAAC,gBAAgB,EAAE9C,YAAY,CAAC;IAC7C,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;;EAEF;;EAEC,MAAM8D,kBAAkB,GAAGA,CAAC9B,OAAO,EAAEC,KAAK,KAAK;IAC7C,MAAM8B,MAAM,GAAG/B,OAAO,CAACG,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACH,KAAK,KAAKA,KAAK,CAAC;IACzD,OAAO8B,MAAM,GAAGA,MAAM,CAAC1B,EAAE,GAAG,IAAI;EAClC,CAAC;;EAED;;EAEA,MAAM2B,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF/D,OAAO,CAACW,GAAG,CAAC,iBAAiB,CAAC;MAC9B,MAAMe,YAAY,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,CAAC;MAChF,MAAMC,cAAc,GAAG,MAAMF,aAAa,CAACC,YAAY,CAAC;MACxD,MAAMyB,SAAS,GAAGzB,YAAY,CAACsC,GAAG,CAAEhC,KAAK,IAAK6B,kBAAkB,CAAClC,cAAc,EAAEK,KAAK,CAAC,CAAC;MACxFhC,OAAO,CAACW,GAAG,CAAC,cAAc,EAAEwC,SAAS,CAAC;MACtCnD,OAAO,CAACW,GAAG,CAAC,iBAAiB,EAAE9C,YAAY,CAAC;MAE5C,KAAK,MAAMqF,OAAO,IAAIrF,YAAY,EAAE;QAClC,MAAMoG,eAAe,GAAG,MAAMvB,oBAAoB,CAACQ,OAAO,CAACd,EAAE,EAAEe,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5E,IAAIc,eAAe,EAAE;UACnB;UACAjE,OAAO,CAACW,GAAG,CAAE,sCAAqCuC,OAAO,CAACd,EAAG,EAAC,CAAC;UAC/D,MAAMa,qBAAqB,CAACC,OAAO,EAAElF,OAAO,EAAEmF,SAAS,EAAEjF,OAAO,EAAE+F,eAAe,CAAC7B,EAAE,CAAC;QACvF,CAAC,MAAM;UACLpC,OAAO,CAACW,GAAG,CAAE,gCAA+BuC,OAAO,CAACd,EAAG,EAAC,CAAC;UACzD,MAAMa,qBAAqB,CAACC,OAAO,EAAElF,OAAO,EAAEmF,SAAS,EAAEjF,OAAO,CAAC;QACnE;MACF;MAEA8B,OAAO,CAACW,GAAG,CAAC,8CAA8C,CAAC;IAC7D,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;EAEDzD,SAAS,CAAC,MAAM;IACd,MAAM4H,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,MAAMjE,WAAW,CAAC,CAAC;MACnB,IAAIjC,OAAO,EAAE;QACX4C,WAAW,CAAC,CAAC;MACf;IACF,CAAC;IAEDsD,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACtF,KAAK,EAAEZ,OAAO,CAAC,CAAC;EAEpB1B,SAAS,CAAC,MAAM;IACdgF,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEvD,OAAO,CAAC;IACxCsD,YAAY,CAACC,OAAO,CAAC,SAAS,EAAErD,OAAO,CAAC;EAC1C,CAAC,EAAE,CAACF,OAAO,EAAEE,OAAO,CAAC,CAAC;EAEtB5B,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,EAAE;MACboD,sBAAsB,CAAC,CAAC;MACxBnD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC;EAEf,MAAMwG,YAAY,GAAGA,CAAA,KAAM;IACzBpF,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,MAAMqF,YAAY,GAAGA,CAAC/G,MAAM,EAAEG,oBAAoB,KAAK;IACrDF,SAAS,CAACD,MAAM,CAAC;IACjBI,uBAAuB,CAACD,oBAAoB,CAAC;EAC/C,CAAC;EAED,MAAM6G,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI3F,YAAY,EAAE;MACdd,YAAY,CAAC,IAAI,CAAC;MAClB,IAAGC,YAAY,CAACyG,MAAM,GAAC,CAAC,EAAC;QACvBP,QAAQ,CAAC,CAAC;QACVQ,KAAK,CAAC,mCAAmC,CAAC;QAC1CxF,QAAQ,CAAC,WAAW,EAAE;UAAEyF,KAAK,EAAE;YAAE3G;UAAa;QAAE,CAAC,CAAC;MACpD;IACJ,CAAC,MAAM;MACLmC,OAAO,CAACD,KAAK,CAAC,wEAAwE,CAAC;MACvFtB,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEzB,OAAA,CAAAE,SAAA;IAAAuH,QAAA,eACEzH,OAAA;MAAK0H,SAAS,EAAC,OAAO;MAAAD,QAAA,gBACpBzH,OAAA,CAACN,MAAM;QAAAiI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV9H,OAAA;QAAK0H,SAAS,EAAC,eAAe;QAAAD,QAAA,GAE1B,CAAC/F,YAAY,gBACb1B,OAAA;UAAAyH,QAAA,gBACEzH,OAAA,CAACT,mBAAmB;YAAC6H,YAAY,EAAEA,YAAa;YAACW,WAAW,EAAEA,CAAA,KAAMnH,YAAY,CAAC,IAAI;UAAE;YAAA+G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC1F9H,OAAA,CAACL,MAAM;YAACqI,OAAO,EAAEhG,WAAY;YAAAyF,QAAA,EAAC;UAAuB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC,gBAEN9H,OAAA,CAACR,iBAAiB;UAChB4B,MAAM,EAAEA,MAAO;UACfE,MAAM,EAAEA,MAAO;UACfN,OAAO,EAAEA,OAAQ;UACjBE,OAAO,EAAEA,OAAQ;UACjB+G,aAAa,EAAEhH,UAAW;UAC1BiH,aAAa,EAAE/G,UAAW;UAC1BgH,UAAU,EAAEd,qBAAsB;UAClC7F,aAAa,EAAGE;QAAa;UAAAiG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eAGJ9H,OAAA;UAAK0H,SAAS,EAAC,YAAY;UAAAD,QAAA,eACzBzH,OAAA,CAACL,MAAM;YAACqI,OAAO,EAAEA,CAAA,KAAIb,YAAY,CAAC,CAAE;YAAAM,QAAA,EAAC;UAErC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN9H,OAAA,CAACJ,MAAM;QAAA+H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC,gBACN,CAAC;AAEP,CAAC;AAAC1H,EAAA,CA7aID,QAAQ;EAAA,QAgBKV,WAAW;AAAA;AAAA2I,EAAA,GAhBxBjI,QAAQ;AA+ad,eAAeA,QAAQ;AAAC,IAAAiI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}