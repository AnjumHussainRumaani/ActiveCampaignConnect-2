{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import DataAccessComponent from\"./DataAccessComponent\";import DataSyncComponent from\"./DataSyncComponent\";import'./FetchApi.css';import{useNavigate}from\"react-router-dom\";import Header from\"./Header\";import Button from\"./Button\";import Footer from\"./Footer\";import axios from\"axios\";import mondaySdk from'monday-sdk-js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const storedResponseData=JSON.parse(localStorage.getItem(\"responseData\"))||[];const storedApiUrl=localStorage.getItem(\"apiUrl\")||'';const storedActiveCampaignApiKey=localStorage.getItem(\"activeCampaignApiKey\")||'';const FetchApi=()=>{const[apiUrl,setApiUrl]=useState(storedApiUrl);const[activeCampaignApiKey,setActiveCampaignApiKey]=useState(storedActiveCampaignApiKey);const[responseData,setResponseData]=useState(storedResponseData);const[fetchData,setFetchData]=useState(false);const[boardId,setBoardId]=useState('');const[groupId,setGroupId]=useState('');const[boards,setBoards]=useState([]);const[groups,setGroups]=useState([]);const[accessIsGiven,setAccessIsGiven]=useState(false);const[isauthorized,setIsAuthorized]=useState(false);const[token,setToken]=useState('');const monday=mondaySdk();const navigate=useNavigate();useEffect(()=>{localStorage.setItem(\"responseData\",JSON.stringify(responseData));},[responseData]);useEffect(()=>{localStorage.setItem(\"apiUrl\",apiUrl);},[apiUrl]);useEffect(()=>{localStorage.setItem(\"activeCampaignApiKey\",activeCampaignApiKey);},[activeCampaignApiKey]);const HandleLogin=()=>{window.location.href='https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/auth';};useEffect(()=>{const urlParams=new URLSearchParams(window.location.search);const authorizationCode=urlParams.get('code');if(authorizationCode){axios.get(\"https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/monday-callback?code=\".concat(authorizationCode)).then(response=>{const accessToken=response.data.access_token;monday.setToken(accessToken);if(accessToken){setToken(accessToken);setIsAuthorized(true);}}).catch(error=>{console.error('Error exchanging code for tokens:',error);});}},[monday]);// Fetching All boards of User's Mondya.com Account\nconst fetchBoards=async()=>{try{const boardsResponse=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"\".concat(token),'API-Version':'2023-07'},body:JSON.stringify({'query':'{ boards { id name } }'})});const boardsData=await boardsResponse.json();console.log(\"Boards Data: \",boardsData);setBoards(boardsData.data.boards);}catch(error){console.error('Error fetching boards:',error);}};// Fetching All groups of User's Mondya.com Account under the selected board\nconst fetchGroups=async()=>{try{const groupsResponse=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"\".concat(token),'API-Version':'2023-07'},body:JSON.stringify({'query':\"{\\n            boards(ids: \".concat(boardId,\") {\\n              groups {\\n                id title\\n              }\\n            }\\n          }\")})});const groupsData=await groupsResponse.json();console.log(\"groups data: \",groupsData);setGroups(groupsData.data.boards[0].groups);}catch(error){console.error('Error fetching groups:',error);}};//Fetching Data from User's Active Campaign Account\nconst fetchActiveCampaignApi=async()=>{try{const response=await fetch(\"https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/api/data\",{method:\"POST\",headers:{\"Api-Token\":\"\".concat(activeCampaignApiKey),\"Content-Type\":\"application/json\"},body:JSON.stringify({apiUrl:\"\".concat(apiUrl,\"/api/3/contacts\"),apiKey:activeCampaignApiKey})});if(!response.ok){throw new Error(\"Network response was not ok. Status: \".concat(response.status,\", \").concat(response.statusText));}const data=await response.json();setResponseData(data.contacts);localStorage.setItem(\"contacts\",JSON.stringify(data.contacts));console.log(\"AC Contacts: \",data.contacts);}catch(e){console.error(e);}};// Creating Columns against selected group of Monday.com board\nconst createColumns=async columnTitles=>{const createdColumns=[];try{// Fetch existing columns for the board\nconst existingColumnsResponse=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"\".concat(token),'API-Version':'2023-07'},body:JSON.stringify({'query':\"query { boards (ids: [\".concat(boardId,\"]) { columns { id title }}}\")})});const existingColumnsData=await existingColumnsResponse.json();const existingColumns=existingColumnsData.data.boards[0].columns;for(const title of columnTitles){// Check if the column already exists\nconst existingColumn=existingColumns.find(col=>col.title===title);if(existingColumn){console.log(\"Column \\\"\".concat(title,\"\\\" already exists with ID \").concat(existingColumn.id));createdColumns.push({title:existingColumn.title,id:existingColumn.id});}else{// If the column doesn't exist, create it\nconst columnCreationQuery=\"\\n            mutation {\\n              create_column(board_id: \".concat(boardId,\", title: \\\"\").concat(title,\"\\\", column_type: text) {\\n                id\\n                title\\n              }\\n            }\\n          \");const columnCreationResponse=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"\".concat(token),'API-Version':'2023-07'},body:JSON.stringify({'query':columnCreationQuery})});const columnData=await columnCreationResponse.json();createdColumns.push({title:columnData.data.create_column.title,id:columnData.data.create_column.id});}}return createdColumns;}catch(error){console.error('Error fetching or creating columns:',error);throw error;}};// Limitizing not to duplicate the contact in the group\nconst checkExistingContact=async(id,columnId)=>{const existingContactQuery=\"\\n      query {\\n        items_by_column_values(\\n          board_id: \".concat(boardId,\",\\n          column_id: \\\"\").concat(columnId,\"\\\",\\n          column_value: \\\"\").concat(id,\"\\\"\\n        ) {\\n          id\\n        }\\n      }\\n    \");try{const existingContactResponse=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"\".concat(token),'API-Version':'2023-04'},body:JSON.stringify({query:existingContactQuery})});const existingContactData=await existingContactResponse.json();console.log(\"Checking id: \".concat(id,\" for columnId: \").concat(columnId));console.log(\"Existing Contact Data: \",existingContactData);return existingContactData.data.items_by_column_values[0];// Return an array of matching items\n}catch(error){console.error('Error checking existing contact:',error);throw error;}};// Creating Contact if it is new from Active Campaign\n// Updating the existing one if any change is found from Active Campaign\nconst createOrUpdateContact=async(contact,boardId,columnIds,groupId,existingItemId)=>{const columnValues={[columnIds[0]]:contact.id,[columnIds[1]]:contact.firstName,[columnIds[2]]:contact.lastName,[columnIds[3]]:contact.email,[columnIds[4]]:contact.phone};const columnValuesString=JSON.stringify(columnValues).replace(/\"/g,'\\\\\"')// Escape double quotes\n.replace(/\\\\\\\\\"/g,'\\\\\\\\\\\\\\\\\"');// Escape backslashes before double quotes\nlet mutationQuery;if(existingItemId){// If existingItemId is provided, update the existing contact\nmutationQuery=\"\\n        mutation updateContact {\\n          change_multiple_column_values(\\n            board_id: \".concat(boardId,\",\\n            item_id: \").concat(existingItemId,\",\\n            column_values: \\\"\").concat(columnValuesString,\"\\\"\\n          ) {\\n            id\\n          }\\n        }\\n      \");}else{// If no existingItemId is provided, create a new contact\nmutationQuery=\"\\n        mutation createContact {\\n          create_item(\\n            board_id: \".concat(boardId,\",\\n            group_id: \\\"\").concat(groupId,\"\\\",\\n            item_name: \\\"contact\\\",\\n            column_values: \\\"\").concat(columnValuesString,\"\\\"\\n          ) {\\n            id\\n          }\\n        }\\n      \");}try{const response=await fetch(\"https://api.monday.com/v2\",{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"\".concat(token),'API-Version':'2023-04'},body:JSON.stringify({query:mutationQuery})});if(!response.ok){throw new Error(\"Operation failed. Status: \".concat(response.status,\", \").concat(response.statusText));}const responseData=await response.json();console.log(\"Contact Data: \",responseData);}catch(error){console.error('Error modifying contact:',error);throw error;}};//Getting Column Id by title for creating and updating the contact and it's fields respectively\nconst getColumnIdByTitle=(columns,title)=>{const column=columns.find(col=>col.title===title);return column?column.id:null;};// Syncing Data from Active Campaign into Monday.com under selected group of selected board\nconst syncData=async()=>{try{console.log(\"Syncing data...\");const columnTitles=[\"Contact_Id\",\"First Name\",\"Last Name\",\"Email\",\"Phone\"];const createdColumns=await createColumns(columnTitles);const columnIds=columnTitles.map(title=>getColumnIdByTitle(createdColumns,title));console.log(\"Columns ids:\",columnIds);console.log(\"Response Data: \",responseData);for(const contact of responseData){const existingContact=await checkExistingContact(contact.id,columnIds[0]);if(existingContact){// Handle the case where there are multiple matching items\nconsole.log(\"Updating existing contacts for id: \".concat(contact.id));await createOrUpdateContact(contact,boardId,columnIds,groupId,existingContact.id);}else{console.log(\"Creating new contact for id: \".concat(contact.id));await createOrUpdateContact(contact,boardId,columnIds,groupId);}}console.log(\"Data synchronization completed successfully!\");}catch(error){console.error('Error in syncData:',error);}};useEffect(()=>{const fetchBoardsAndGroups=async()=>{await fetchBoards();if(boardId){fetchGroups();}};fetchBoardsAndGroups();},[token,boardId]);useEffect(()=>{if(fetchData){fetchActiveCampaignApi();// setFetchData(false);\n}},[fetchData]);const handleGoBack=()=>{navigate('/');};const onDataAccess=(apiUrl,activeCampaignApiKey)=>{setApiUrl(apiUrl);setActiveCampaignApiKey(activeCampaignApiKey);};const handleSyncButtonClick=()=>{if(isauthorized){setFetchData(true);if(responseData.length>0){syncData();alert(\"Contacts are synced successfully!\");navigate(\"/\",{state:{responseData}});}}else{console.error(\"API URL, Active Campaign API Key, and Monday.com API Key are required.\");setAccessIsGiven(false);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"block\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"div\",{className:\"fetchApiBlock\",children:!isauthorized&&!fetchData?/*#__PURE__*/_jsxs(\"div\",{className:\"centerlize\",children:[/*#__PURE__*/_jsx(DataAccessComponent,{onDataAccess:onDataAccess,onFetchData:()=>setFetchData(true)}),/*#__PURE__*/_jsx(\"div\",{className:\"backButton\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>handleGoBack(),children:\"Back\"})})]}):!isauthorized&&fetchData?/*#__PURE__*/_jsxs(\"div\",{className:\"centerlize\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{textAlign:\"start\"},children:\"Authorize to Monday.com\"}),/*#__PURE__*/_jsx(\"div\",{style:{textAlign:\"center\"},children:/*#__PURE__*/_jsx(Button,{onClick:HandleLogin,children:\"Authorize\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"backButton\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>handleGoBack(),children:\"Back\"})})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"centerlize\",children:[/*#__PURE__*/_jsx(DataSyncComponent,{boards:boards,groups:groups,boardId:boardId,groupId:groupId,onBoardChange:setBoardId,onGroupChange:setGroupId,onSyncData:handleSyncButtonClick,accessIsGiven:isauthorized}),/*#__PURE__*/_jsx(\"div\",{className:\"backButton\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>handleGoBack(),children:\"Back\"})})]})}),/*#__PURE__*/_jsx(Footer,{})]})});};export default FetchApi;","map":{"version":3,"names":["React","useState","useEffect","DataAccessComponent","DataSyncComponent","useNavigate","Header","Button","Footer","axios","mondaySdk","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","storedResponseData","JSON","parse","localStorage","getItem","storedApiUrl","storedActiveCampaignApiKey","FetchApi","apiUrl","setApiUrl","activeCampaignApiKey","setActiveCampaignApiKey","responseData","setResponseData","fetchData","setFetchData","boardId","setBoardId","groupId","setGroupId","boards","setBoards","groups","setGroups","accessIsGiven","setAccessIsGiven","isauthorized","setIsAuthorized","token","setToken","monday","navigate","setItem","stringify","HandleLogin","window","location","href","urlParams","URLSearchParams","search","authorizationCode","get","concat","then","response","accessToken","data","access_token","catch","error","console","fetchBoards","boardsResponse","fetch","method","headers","body","boardsData","json","log","fetchGroups","groupsResponse","groupsData","fetchActiveCampaignApi","apiKey","ok","Error","status","statusText","contacts","e","createColumns","columnTitles","createdColumns","existingColumnsResponse","existingColumnsData","existingColumns","columns","title","existingColumn","find","col","id","push","columnCreationQuery","columnCreationResponse","columnData","create_column","checkExistingContact","columnId","existingContactQuery","existingContactResponse","query","existingContactData","items_by_column_values","createOrUpdateContact","contact","columnIds","existingItemId","columnValues","firstName","lastName","email","phone","columnValuesString","replace","mutationQuery","getColumnIdByTitle","column","syncData","map","existingContact","fetchBoardsAndGroups","handleGoBack","onDataAccess","handleSyncButtonClick","length","alert","state","children","className","onFetchData","onClick","style","textAlign","onBoardChange","onGroupChange","onSyncData"],"sources":["C:/Users/I T S/Desktop/sync-data-from-active_campaigns-to-monday/src/components/FetchApi.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DataAccessComponent from \"./DataAccessComponent\";\r\nimport DataSyncComponent from \"./DataSyncComponent\";\r\nimport './FetchApi.css';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Button from \"./Button\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport mondaySdk from 'monday-sdk-js';\r\nconst storedResponseData = JSON.parse(localStorage.getItem(\"responseData\")) || [];\r\nconst storedApiUrl = localStorage.getItem(\"apiUrl\") || '';\r\nconst storedActiveCampaignApiKey = localStorage.getItem(\"activeCampaignApiKey\") || '';\r\n\r\nconst FetchApi = () => {\r\n\r\n  const [apiUrl, setApiUrl] = useState(storedApiUrl);\r\n  const [activeCampaignApiKey, setActiveCampaignApiKey] = useState(storedActiveCampaignApiKey);\r\n  const [responseData, setResponseData] = useState(storedResponseData);\r\n  const [fetchData, setFetchData] = useState(false);\r\n  const [boardId, setBoardId] = useState('');\r\n  const [groupId, setGroupId] = useState('');\r\n  const [boards, setBoards] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [accessIsGiven, setAccessIsGiven] = useState(false);\r\n  const [isauthorized, setIsAuthorized] = useState(false);\r\n  const [token, setToken] = useState('');\r\n  const monday = mondaySdk();\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"responseData\", JSON.stringify(responseData));\r\n  }, [responseData]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"apiUrl\", apiUrl);\r\n  }, [apiUrl]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"activeCampaignApiKey\", activeCampaignApiKey);\r\n  }, [activeCampaignApiKey]);\r\n\r\n\r\n  const HandleLogin = () => {\r\n\r\n    window.location.href = 'https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/auth';\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const authorizationCode = urlParams.get('code');\r\n\r\n    if (authorizationCode) {\r\n      axios.get(`https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/monday-callback?code=${authorizationCode}`)\r\n        .then((response) => {\r\n          const accessToken = response.data.access_token;\r\n          monday.setToken(accessToken);\r\n\r\n          if (accessToken) {\r\n            setToken(accessToken);\r\n            setIsAuthorized(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error exchanging code for tokens:', error);\r\n        });\r\n    }\r\n  }, [monday]);\r\n\r\n  // Fetching All boards of User's Mondya.com Account\r\n\r\n  const fetchBoards = async () => {\r\n    try {\r\n      const boardsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': '{ boards { id name } }',\r\n        }),\r\n      });\r\n\r\n      const boardsData = await boardsResponse.json();\r\n      console.log(\"Boards Data: \", boardsData);\r\n      setBoards(boardsData.data.boards);\r\n    } catch (error) {\r\n      console.error('Error fetching boards:', error);\r\n    }\r\n  };\r\n\r\n  // Fetching All groups of User's Mondya.com Account under the selected board\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const groupsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `{\r\n            boards(ids: ${boardId}) {\r\n              groups {\r\n                id title\r\n              }\r\n            }\r\n          }`,\r\n        }),\r\n      });\r\n\r\n      const groupsData = await groupsResponse.json();\r\n      console.log(\"groups data: \", groupsData);\r\n      setGroups(groupsData.data.boards[0].groups);\r\n    } catch (error) {\r\n      console.error('Error fetching groups:', error);\r\n    }\r\n  };\r\n\r\n  //Fetching Data from User's Active Campaign Account\r\n\r\n  const fetchActiveCampaignApi = async () => {\r\n    try {\r\n      const response = await fetch(\"https://pno8prww03.execute-api.us-east-1.amazonaws.com/prod/api/data\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Api-Token\": `${activeCampaignApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          apiUrl: `${apiUrl}/api/3/contacts`,\r\n          apiKey: activeCampaignApiKey,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Network response was not ok. Status: ${response.status}, ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseData(data.contacts);\r\n      localStorage.setItem(\"contacts\", JSON.stringify(data.contacts));\r\n      console.log(\"AC Contacts: \", data.contacts);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  // Creating Columns against selected group of Monday.com board\r\n  const createColumns = async (columnTitles) => {\r\n    const createdColumns = [];\r\n  \r\n    try {\r\n      // Fetch existing columns for the board\r\n      const existingColumnsResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-07'\r\n        },\r\n        body: JSON.stringify({\r\n          'query': `query { boards (ids: [${boardId}]) { columns { id title }}}`,\r\n        }),\r\n      });\r\n  \r\n      const existingColumnsData = await existingColumnsResponse.json();\r\n      const existingColumns = existingColumnsData.data.boards[0].columns;\r\n  \r\n      for (const title of columnTitles) {\r\n        // Check if the column already exists\r\n        const existingColumn = existingColumns.find((col) => col.title === title);\r\n  \r\n        if (existingColumn) {\r\n          console.log(`Column \"${title}\" already exists with ID ${existingColumn.id}`);\r\n          createdColumns.push({\r\n            title: existingColumn.title,\r\n            id: existingColumn.id\r\n          });\r\n        } else {\r\n          // If the column doesn't exist, create it\r\n          const columnCreationQuery = `\r\n            mutation {\r\n              create_column(board_id: ${boardId}, title: \"${title}\", column_type: text) {\r\n                id\r\n                title\r\n              }\r\n            }\r\n          `;\r\n  \r\n          const columnCreationResponse = await fetch(\"https://api.monday.com/v2\", {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `${token}`,\r\n              'API-Version': '2023-07'\r\n            },\r\n            body: JSON.stringify({\r\n              'query': columnCreationQuery,\r\n            }),\r\n          });\r\n  \r\n          const columnData = await columnCreationResponse.json();\r\n          createdColumns.push({\r\n            title: columnData.data.create_column.title,\r\n            id: columnData.data.create_column.id\r\n          });\r\n        }\r\n      }\r\n  \r\n      return createdColumns;\r\n    } catch (error) {\r\n      console.error('Error fetching or creating columns:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Limitizing not to duplicate the contact in the group\r\n  \r\n  const checkExistingContact = async (id, columnId) => {\r\n    const existingContactQuery = `\r\n      query {\r\n        items_by_column_values(\r\n          board_id: ${boardId},\r\n          column_id: \"${columnId}\",\r\n          column_value: \"${id}\"\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n  \r\n    try {\r\n      const existingContactResponse = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: existingContactQuery\r\n        }),\r\n      });\r\n  \r\n      const existingContactData = await existingContactResponse.json();\r\n      console.log(`Checking id: ${id} for columnId: ${columnId}`);\r\n      console.log(\"Existing Contact Data: \", existingContactData);\r\n  \r\n      return existingContactData.data.items_by_column_values[0]; // Return an array of matching items\r\n    } catch (error) {\r\n      console.error('Error checking existing contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  // Creating Contact if it is new from Active Campaign\r\n  // Updating the existing one if any change is found from Active Campaign\r\n\r\n  const createOrUpdateContact = async (contact, boardId, columnIds, groupId, existingItemId) => {\r\n    const columnValues = {\r\n      [columnIds[0]]: contact.id,\r\n      [columnIds[1]]: contact.firstName,\r\n      [columnIds[2]]: contact.lastName,\r\n      [columnIds[3]]: contact.email,\r\n      [columnIds[4]]: contact.phone,\r\n    };\r\n  \r\n    const columnValuesString = JSON.stringify(columnValues)\r\n      .replace(/\"/g, '\\\\\"')  // Escape double quotes\r\n      .replace(/\\\\\\\\\"/g, '\\\\\\\\\\\\\\\\\"');  // Escape backslashes before double quotes\r\n  \r\n    let mutationQuery;\r\n    \r\n    if (existingItemId) {\r\n      // If existingItemId is provided, update the existing contact\r\n      mutationQuery = `\r\n        mutation updateContact {\r\n          change_multiple_column_values(\r\n            board_id: ${boardId},\r\n            item_id: ${existingItemId},\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    } else {\r\n      // If no existingItemId is provided, create a new contact\r\n      mutationQuery = `\r\n        mutation createContact {\r\n          create_item(\r\n            board_id: ${boardId},\r\n            group_id: \"${groupId}\",\r\n            item_name: \"contact\",\r\n            column_values: \"${columnValuesString}\"\r\n          ) {\r\n            id\r\n          }\r\n        }\r\n      `;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(\"https://api.monday.com/v2\", {\r\n        method: 'POST',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          'Authorization': `${token}`,\r\n          'API-Version': '2023-04'\r\n        },\r\n        body: JSON.stringify({\r\n          query: mutationQuery\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Operation failed. Status: ${response.status}, ${response.statusText}`);\r\n      }\r\n  \r\n      const responseData = await response.json();\r\n      console.log(\"Contact Data: \", responseData);\r\n    } catch (error) {\r\n      console.error('Error modifying contact:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n //Getting Column Id by title for creating and updating the contact and it's fields respectively\r\n  \r\n  const getColumnIdByTitle = (columns, title) => {\r\n    const column = columns.find((col) => col.title === title);\r\n    return column ? column.id : null;\r\n  };\r\n\r\n  // Syncing Data from Active Campaign into Monday.com under selected group of selected board\r\n  \r\n  const syncData = async () => {\r\n    try {\r\n      console.log(\"Syncing data...\");\r\n      const columnTitles = [\"Contact_Id\", \"First Name\", \"Last Name\", \"Email\", \"Phone\"];\r\n      const createdColumns = await createColumns(columnTitles);\r\n      const columnIds = columnTitles.map((title) => getColumnIdByTitle(createdColumns, title));\r\n      console.log(\"Columns ids:\", columnIds);\r\n      console.log(\"Response Data: \", responseData);\r\n  \r\n      for (const contact of responseData) {\r\n        const existingContact = await checkExistingContact(contact.id, columnIds[0]);\r\n  \r\n        if (existingContact) {\r\n          // Handle the case where there are multiple matching items\r\n          console.log(`Updating existing contacts for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId, existingContact.id);\r\n        } else {\r\n          console.log(`Creating new contact for id: ${contact.id}`);\r\n          await createOrUpdateContact(contact, boardId, columnIds, groupId);\r\n        }\r\n      }\r\n  \r\n      console.log(\"Data synchronization completed successfully!\");\r\n    } catch (error) {\r\n      console.error('Error in syncData:', error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const fetchBoardsAndGroups = async () => {\r\n      await fetchBoards();\r\n      if (boardId) {\r\n        fetchGroups();\r\n      }\r\n    };\r\n\r\n    fetchBoardsAndGroups();\r\n  }, [token, boardId]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (fetchData) {\r\n      fetchActiveCampaignApi();\r\n      // setFetchData(false);\r\n    }\r\n  }, [fetchData]);\r\n\r\n  const handleGoBack = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const onDataAccess = (apiUrl, activeCampaignApiKey) => {\r\n    setApiUrl(apiUrl);\r\n    setActiveCampaignApiKey(activeCampaignApiKey);\r\n  };\r\n\r\n  const handleSyncButtonClick = () => {\r\n    if (isauthorized) {\r\n        setFetchData(true);\r\n        if(responseData.length>0){\r\n          syncData();\r\n          alert(\"Contacts are synced successfully!\");\r\n          navigate(\"/\", { state: { responseData } });        \r\n        }\r\n    } else {\r\n      console.error(\"API URL, Active Campaign API Key, and Monday.com API Key are required.\");\r\n      setAccessIsGiven(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"block\">\r\n        <Header />\r\n        <div className=\"fetchApiBlock\">\r\n          {\r\n            !isauthorized && !fetchData? \r\n            <div className=\"centerlize\">\r\n              <DataAccessComponent onDataAccess={onDataAccess} onFetchData={() => setFetchData(true)} />\r\n              <div className=\"backButton\">\r\n                <Button onClick={()=>handleGoBack()}>\r\n                  Back\r\n                </Button>\r\n              </div>\r\n            </div>\r\n            : !isauthorized && fetchData ?\r\n                  <div className=\"centerlize\">\r\n                      <div className=\"card\">\r\n                        <h2 style={{ textAlign: \"start\" }}>Authorize to Monday.com</h2>\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                          <Button onClick={HandleLogin}>\r\n                            Authorize\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"backButton\">\r\n                        <Button onClick={()=>handleGoBack()}>\r\n                          Back\r\n                        </Button>\r\n                      </div>\r\n                  </div>\r\n            :           \r\n            <div className=\"centerlize\">\r\n                <DataSyncComponent\r\n                boards={boards}\r\n                groups={groups}\r\n                boardId={boardId}\r\n                groupId={groupId}\r\n                onBoardChange={setBoardId}\r\n                onGroupChange={setGroupId}\r\n                onSyncData={handleSyncButtonClick}\r\n                accessIsGiven ={isauthorized}\r\n                />\r\n                <div className=\"backButton\">\r\n                    <Button onClick={()=>handleGoBack()}>\r\n                          Back\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n          }\r\n\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );  \r\n};\r\n\r\nexport default FetchApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}